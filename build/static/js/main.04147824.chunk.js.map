{"version":3,"sources":["components/DateInput.js","components/Photo.js","App.js","serviceWorker.js","index.js"],"names":["DateInput","props","react_default","a","createElement","es","selected","date","onChange","changeDate","Photo","photo","title","src","url","alt","explanation","App","state","getPhoto","_callee","regenerator_default","wrap","_context","prev","next","moment","isBefore","fetch","concat","then","response","json","requested","_this","setState","alert","to","stop","dateFromInput","formatted","format","console","log","_this2","this","className","components_DateInput","components_Photo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TA0BeA,SApBG,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAC,SAAYL,EAAMM,KAClBC,SAAYP,EAAMQ,gBCEbC,EATD,SAACT,GAAD,OACRC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKH,EAAMU,MAAMC,OACjBV,EAAAC,EAAAC,cAAA,OAAKS,IAAMZ,EAAMU,MAAMG,IAAKC,IAAMd,EAAMU,MAAMC,QACjDV,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,MAAMK,eC0DRC,6MAvDbC,MAAO,CACLX,KAAK,GACLI,MAAM,MAoBNQ,+CAAW,SAAAC,EAAMb,GAAN,OAAAc,EAAAlB,EAAAmB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACLC,MAASC,SAASD,OADb,CAAAH,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAEHG,MAAK,4CAAAC,OAA6CtB,EAA7C,sDACVuB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAS,OAAIC,EAAKC,SAAS,CAACxB,MAAOsB,MAJhC,OAAAV,EAAAE,KAAA,eAMTW,MAAM,sCAAuCV,MAASW,GAAG9B,GAAQ,KANxD,wBAAAgB,EAAAe,SAAAlB,8DAUXX,WAAa,SAAA8B,GAET,IAAIC,EAAWd,IAAOa,GAAeE,OAAO,cAC5CC,QAAQC,IAAI,gBAAiBH,GAC/BN,EAAKC,SAAS,CAAC5B,KAAMiC,IACrBN,EAAKf,SAASqB,uFA/BG,IAAAI,EAAAC,KACjBjB,MAAO,wFACNE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIY,EAAKT,SAAS,CAACxB,MAAOqB,uCAiCtC,OADAU,QAAQC,IAAIjB,MAASe,OAAO,eAE1BvC,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,OACb5C,EAAAC,EAAAC,cAAA,UAAQ0C,UAAU,cACjB5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAWtC,WAAYoC,KAAKpC,WAC5BF,KAAMsC,KAAK3B,MAAMX,QAGlBL,EAAAC,EAAAC,cAAC4C,EAAD,CAAOrC,MAAOkC,KAAK3B,MAAMP,gBAlDfsC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.04147824.chunk.js","sourcesContent":["import React from 'react';\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n// import moment from 'moment';\r\n\r\n\r\nconst DateInput = props => (\r\n      <div>\r\n          <DatePicker \r\n          selected = {props.date}\r\n          onChange = {props.changeDate}\r\n          />\r\n\r\n        {/* So this is the old boring input that still works */}\r\n\r\n    {/* <form onSubmit ={props.changeDate}>\r\n         Enter A date (YYYY-MM-DD):\r\n         <input/>\r\n         <input type= \"submit\"/>\r\n\r\n     </form> */}\r\n\r\n\r\n      </div>\r\n)\r\n// moment.format('YYYY-MM-DD')\r\nexport default DateInput;\r\n","import React from 'react';\r\n\r\n\r\nconst Photo = (props)=>(\r\n      <div>\r\n          <h2>{props.photo.title}</h2>\r\n          <img src ={props.photo.url} alt ={props.photo.title}/>\r\n       <p>{props.photo.explanation}</p>\r\n      </div>\r\n\r\n)\r\n\r\nexport default Photo;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport moment from 'moment'\n//components\nimport DateInput from './components/DateInput'\nimport Photo from './components/Photo'\n\n\n\nclass App extends Component {\n  state ={\n    date:'',\n    photo:''\n  }\n \n\n    componentDidMount(){\n      fetch ('https://api.nasa.gov/planetary/apod?api_key=7B7uLHwCUN5ZJuyoncmo6naDl7gNE3rOug3slTL7')\n      .then(response => response.json())\n      .then(json => this.setState({photo: json}))\n    }\n    \n      //   formatDate = date =>{\n      //     if (date){\n      //     let year = date.year()\n      //     let month = date.month()+ 1\n      //     let day = date.day()\n      //     return `${year}-${month}-${day}`\n      //   }\n      // }\n    // moment(this.state.date).format('YYYY-MM-DD'\n\n    getPhoto = async date => {\n      if( moment().isBefore(moment()) ){\n      await fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=7B7uLHwCUN5ZJuyoncmo6naDl7gNE3rOug3slTL7`)\n      .then(response => response.json())\n      .then(requested => this.setState({photo: requested}))\n    } else{\n      alert(`That's in the future. \\n Come back `+ moment().to(date) + '!')\n    }\n  }\n\n    changeDate = dateFromInput => {\n        // console.log('date from input', dateFromInput)\n        let formatted =moment(dateFromInput).format('YYYY-MM-DD')\n        console.log(\"formated date\", formatted)\n      this.setState({date: formatted})\n      this.getPhoto(formatted)\n      }\n\n  render() {\n    console.log(moment().format('YYYY-MM-DD'))\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n         <DateInput changeDate={this.changeDate}\n         date={this.state.date}/>\n         \n        </header>\n        <Photo photo={this.state.photo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}